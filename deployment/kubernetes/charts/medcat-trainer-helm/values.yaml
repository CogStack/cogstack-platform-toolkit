# Default values for medcat-trainer-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1
nginxReplicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: cogstacksystems/medcat-trainer
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
nginxImage:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "1.29.1"

# Add any environment variables here that should be set in the medcat-trainer container
env:
  CSRF_TRUSTED_ORIGINS: "http://localhost:8080"
  DEBUG: "1"
  EMAIL_HOST: "mail.cogstack.org"
  EMAIL_PASS: "to-be-changed"
  EMAIL_PORT: "465"
  EMAIL_USER: "example@cogstack.org"
  ENV: "non-prod"
  LOAD_EXAMPLES: "1"
  LOAD_NUM_DOC_PAGES: "10"
  MAX_DATASET_SIZE: "10000"
  MAX_MEDCAT_MODELS: "2"
  OPENBLAS_NUM_THREADS: "1"
  RESUBMIT_ALL_ON_STARTUP: "0"
  UNIQUE_DOC_NAMES_IN_DATASETS: "True"

  # TODO: Support custom DB overrides#
  # DB_ENGINE: "sqlite3"
  DB_ENGINE: "postgresql"
  DB_NAME: "postgres"
  DB_USER: "postgres"
  DB_PORT: "5432"
  # DB_PASSWORD: ""
  # DB_HOST: "" 

postgresql:
  enabled: true
  # TODO: Support custom DB overrides
  # auth:
  #  - name for a custom database
  #   database: "my_trainer_db"
  #   username: "trainer_admin"
  #   password: "changeme_changeme"
  primary:
    persistence:
      # Size of the PVC for the postgres database
      size: 500Mi

persistence:
  media:
    # Size of PVC for files like model packs and other media downloaded by medcat trainer
    size: 8Gi
  static:
    # Size of the PVC for the static HTML site
    size: 100Mi
  sqlite:
    # Size of the PVC for the Sqlite database 
    size: 100Mi
    # Size of the PVC for the Sqlite backups
    backupDbSize: 300Mi
  storageClassName: ""

# MedCAT config as described here: https://github.com/CogStack/cogstack-nlp/blob/main/medcat-v2/medcat/config/config.py
medcatConfig: |
    cat.linking.optim = {'type': 'standard', 'lr': 0.1}
    cat.linking.filter_before_disamb = True
    # 20 - INFO; 10 - DEBUG
    cat.general.log_level = 20
    # Recommended is to have this one negative
    cat.linking.similarity_threshold = -5
    # And this one to be used as the real th
    cat.linking.similarity_threshold_trainer = -5
    # Used for limiting the number of occ of a concept in a project
    cat.general.cui_count_limit = 100000000
    # Is unlink full
    cat.general.full_unlink = False
    # use this spacy model
    cat.general.spacy_model = 'en_core_web_md'

solr:
  replicaCount: 1
  collectionShards: 1
  collectionReplicas: 1
  zookeeper:
    replicaCount: 1
    persistence:
      size: 1Gi
  persistence:
    size: 1Gi
  auth:
    # TODO: support SOLR auth from medcat trainer API
    enabled: false
  podLabels:
    app.kubernetes.io/component: solr
    app.kubernetes.io/part-of: cogstack

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# TODO Add liveness and readiness to django app
# https://github.com/CogStack/cogstack-nlp/pull/131/files
# livenessProbe:
#   httpGet:
#     path: /api/health/live/
#     port: http
# readinessProbe:
#   httpGet:
#     path: /api/health/ready/
#     port: http
# startupProbe:
#   httpGet:
#     path: /api/health/startup/
#     port: http
#   failureThreshold: 30
#   periodSeconds: 10

nginx:
  livenessProbe:
    httpGet:
      path: /nginx/health/live
      port: http
  readinessProbe:
    httpGet:
      path: /nginx/health/live
      port: http


# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
